Search Value, Linear Search, Binary Search, Fibonacci Search, Notes
1, 0m0.003s, 0m0.003s, 0m0.003s, this result does not make sense because 1 is not in the list, so every algorithm must go to the maximum number of iterations. For linear search, this is the number of elements in the list. For Fibonacci search and binary search, it is about log(number of elements) which is significantly less than the number of elements.
4, 0m0.003s, 0m0.003s, 0m0.003s, each search algorithm is equally as fast because linear search is O(n) however it has one iteration and the binary and fibonacci searches are O(log n)
22, 0m0.003s, 0m0.003s, 0m0.003s, each search algorithm is equally as fast because linear search is O(n) however it has 2 iterations and the binary and fibonacci searches are O(log n)
37, 0m0.003s, 0m0.003s, 0m0.003s, each search algorithm is equally as fast because linear search is O(n) however it has 4 iterations and the binary and fibonacci searches are O(log n)
22906, 0m0.004s, 0m0.003s, 0m0.003s, The fastest searches were the binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through hundreds of elements individually up to 22906 which takes more time.
53757, 0m0.004s, 0m0.003s, 0m0.003s, The fastest searches were binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through hundreds of elements individually up to 53575 which takes more time
112591, 0m0.004s, 0m0.003s, 0m0.004s, The fastest search was binary search. The element may have been in an inefficient location for the Fibonnaci search compared to the binary search which is why it took longer. Fibonacci search may have Linear search has to manually iterate through thousands of elements to 112591 which takes longer. 
361940, 0m0.004s, 0m0.003s, 0m0.003s, The fastest search were the binary and Fibonacci searches which split the list into sections to search. The linear search has to manually search thousands of elements individually up to 361940 which takes more time.
475713,  0m0.004s, 0m0.003s, 0m0.004s, The fastest search was binary search. The element may have been in an inefficient location for the Fibonnaci search compared to the binary search which is why it took longer. Fibonacci search may have Linear search has to manually iterate through thousands of elements to 475713 which takes longer.
893766, 0m0.004s, 0m0.003s, 0m0.003s, The fastest searches were binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through thousands of elements individually up to 892766 which takes more time
996637, 0m0.004s, 0m0.003s, 0m0.003s, The fastest searches were binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through thousands of elements individually up to 996637 which takes more time
996639, 0m0.004s, 0m0.003s, 0m0.003s,  The fastest searches were binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through thousands of elements individually up to 996639 which takes more time
996652, 0m0.004s, 0m0.003s, 0m0.003s,  The fastest searches were binary and Fibonacci searches which split the list into sections to search. The linear search has to manually iterate through thousands of elements individually up to 996652 which takes more time
-996652, 0m0.004s, 0m0.003s, 0m0.003s, The fastest searches were binary and Fibonacci searches. Each algorithm must go to the maximum number of iterations. For linear search, this is the number of elements in the list. For Fibonacci search and binary search, it is about log(number of elements) which is significantly less than the number of elements.

